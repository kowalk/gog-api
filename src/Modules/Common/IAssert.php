<?php

namespace App\Modules\Common;

interface IAssert
{
    public static function string($value, $message = '');
    public static function stringNotEmpty($value, $message = '');
    public static function integer($value, $message = '');
    public static function integerish($value, $message = '');
    public static function positiveInteger($value, $message = '');
    public static function float($value, $message = '');
    public static function numeric($value, $message = '');
    public static function natural($value, $message = '');
    public static function boolean($value, $message = '');
    public static function scalar($value, $message = '');
    public static function object($value, $message = '');
    public static function resource($value, $type = null, $message = '');
    public static function isCallable($value, $message = '');
    public static function isArray($value, $message = '');
    public static function isIterable($value, $message = '');
    public static function isInstanceOf($value, $class, $message = '');
    public static function notInstanceOf($value, $class, $message = '');
    public static function isInstanceOfAny($value, array $classes, $message = '');
    public static function isAOf($value, $class, $message = '');
    public static function isNotA($value, $class, $message = '');
    public static function isAnyOf($value, array $classes, $message = '');
    public static function isEmpty($value, $message = '');
    public static function notEmpty($value, $message = '');
    public static function null($value, $message = '');
    public static function notNull($value, $message = '');
    public static function true($value, $message = '');
    public static function false($value, $message = '');
    public static function notFalse($value, $message = '');
    public static function ip($value, $message = '');
    public static function ipv4($value, $message = '');
    public static function ipv6($value, $message = '');
    public static function email($value, $message = '');
    public static function uniqueValues(array $values, $message = '');
    public static function eq($value, $expect, $message = '');
    public static function notEq($value, $expect, $message = '');
    public static function same($value, $expect, $message = '');
    public static function notSame($value, $expect, $message = '');
    public static function greaterThan($value, $limit, $message = '');
    public static function greaterThanEq($value, $limit, $message = '');
    public static function lessThan($value, $limit, $message = '');
    public static function lessThanEq($value, $limit, $message = '');
    public static function range($value, $min, $max, $message = '');
    public static function oneOf($value, array $values, $message = '');
    public static function inArray($value, array $values, $message = '');
    public static function contains($value, $subString, $message = '');
    public static function notContains($value, $subString, $message = '');
    public static function notWhitespaceOnly($value, $message = '');
    public static function startsWith($value, $prefix, $message = '');
    public static function notStartsWith($value, $prefix, $message = '');
    public static function startsWithLetter($value, $message = '');
    public static function endsWith($value, $suffix, $message = '');
    public static function notEndsWith($value, $suffix, $message = '');
    public static function regex($value, $pattern, $message = '');
    public static function notRegex($value, $pattern, $message = '');
    public static function unicodeLetters($value, $message = '');
    public static function alpha($value, $message = '');
    public static function digits($value, $message = '');
    public static function alnum($value, $message = '');
    public static function lower($value, $message = '');
    public static function upper($value, $message = '');
    public static function length($value, $length, $message = '');
    public static function minLength($value, $min, $message = '');
    public static function maxLength($value, $max, $message = '');
    public static function lengthBetween($value, $min, $max, $message = '');
    public static function fileExists($value, $message = '');
    public static function file($value, $message = '');
    public static function directory($value, $message = '');
    public static function readable($value, $message = '');
    public static function writable($value, $message = '');
    public static function classExists($value, $message = '');
    public static function subclassOf($value, $class, $message = '');
    public static function interfaceExists($value, $message = '');
    public static function implementsInterface($value, $interface, $message = '');
    public static function propertyExists($classOrObject, $property, $message = '');
    public static function propertyNotExists($classOrObject, $property, $message = '');
    public static function methodExists($classOrObject, $method, $message = '');
    public static function methodNotExists($classOrObject, $method, $message = '');
    public static function keyExists($array, $key, $message = '');
    public static function keyNotExists($array, $key, $message = '');
    public static function validArrayKey($value, $message = '');
    public static function count($array, $number, $message = '');
    public static function minCount($array, $min, $message = '');
    public static function maxCount($array, $max, $message = '');
    public static function countBetween($array, $min, $max, $message = '');
    public static function isList($array, $message = '');
    public static function isNonEmptyList($array, $message = '');
    public static function isMap($array, $message = '');
    public static function isNonEmptyMap($array, $message = '');
    public static function uuid($value, $message = '');
    public static function throws(\Closure $expression, $class = 'Exception', $message = '');
}